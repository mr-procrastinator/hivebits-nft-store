import {
  require_dist as require_dist2
} from "./chunk-XZ6B2NFE.js";
import {
  require_dist
} from "./chunk-LKNDHCNV.js";
import {
  __commonJS
} from "./chunk-Y7S7B2N7.js";

// node_modules/@ton-community/assets-sdk/dist/utils.js
var require_utils = __commonJS({
  "node_modules/@ton-community/assets-sdk/dist/utils.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defer = exports.internalOnchainContentToCell = exports.sleep = void 0;
    var core_1 = require_dist2();
    var crypto_1 = require_dist();
    function sleep(timeout) {
      return new Promise((res) => {
        setTimeout(() => res(), timeout);
      });
    }
    exports.sleep = sleep;
    function internalOnchainContentToCell(internal) {
      const dict = core_1.Dictionary.empty(core_1.Dictionary.Keys.Buffer(32), core_1.Dictionary.Values.Cell());
      for (const k in internal) {
        if (internal[k] === void 0) {
          continue;
        }
        const b = (0, core_1.beginCell)();
        if (k === "image_data") {
          const chunks = core_1.Dictionary.empty(core_1.Dictionary.Keys.Uint(32), core_1.Dictionary.Values.Cell());
          const buf = Buffer.from(internal[k], "base64");
          for (let i = 0; i * 127 < buf.length; i++) {
            chunks.set(i, (0, core_1.beginCell)().storeBuffer(buf.subarray(i * 127, (i + 1) * 127)).endCell());
          }
          b.storeUint(1, 8).storeDict(chunks).endCell();
        } else {
          b.storeUint(0, 8).storeStringTail(internal[k].toString());
        }
        dict.set((0, crypto_1.sha256_sync)(k), b.endCell());
      }
      return (0, core_1.beginCell)().storeUint(0, 8).storeDict(dict).endCell();
    }
    exports.internalOnchainContentToCell = internalOnchainContentToCell;
    function defer(factory) {
      return (...args) => factory(...args);
    }
    exports.defer = defer;
  }
});

export {
  require_utils
};
//# sourceMappingURL=chunk-KVZWYLU7.js.map
