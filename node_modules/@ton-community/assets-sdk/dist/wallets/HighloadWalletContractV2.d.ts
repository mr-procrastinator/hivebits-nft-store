/// <reference types="node" />
import { Address, Cell, Contract, ContractProvider, MessageRelaxed, Sender, SendMode, Slice } from "@ton/core";
import { Maybe } from "@ton/ton/dist/utils/maybe";
export declare class HighloadWalletContractV2 implements Contract {
    readonly workchain: number;
    readonly publicKey: Buffer;
    readonly address: Address;
    readonly walletId: number;
    readonly init: {
        code: Cell;
        data: Cell;
    };
    private constructor();
    static create(args: {
        workchain: number;
        publicKey: Buffer;
        walletId?: Maybe<number>;
    }): HighloadWalletContractV2;
    /**
     * Get wallet balance.
     */
    getBalance(provider: ContractProvider): Promise<bigint>;
    /**
     * Send signed message.
     */
    send(provider: ContractProvider, message: Cell): Promise<void>;
    /**
     * Sign and send message.
     */
    sendTransfer(provider: ContractProvider, args: {
        secretKey: Buffer;
        messages: MessageRelaxed[];
        seqno?: Maybe<number>;
        sendMode?: Maybe<SendMode>;
        timeout?: Maybe<number>;
    }): Promise<void>;
    /**
     * Create signed message.
     */
    createTransfer(args: {
        secretKey: Buffer;
        messages: MessageRelaxed[];
        seqno?: Maybe<number>;
        sendMode?: Maybe<SendMode>;
        now?: Maybe<number>;
        timeout?: Maybe<number>;
    }): Cell;
    /**
     * Load signed message.
     */
    loadTransfer(src: Slice): {
        signature: Buffer;
        walletId: number;
        queryId: bigint;
        messages: MessageRelaxedValue[];
    };
    /**
     * Send signed message and wait for processing.
     */
    sendTransferAndWait(provider: ContractProvider, args: {
        seqno?: number | null;
        sendMode?: SendMode | null;
        secretKey: Buffer;
        messages: MessageRelaxed[];
        timeout?: number | null;
    }, sleepInterval?: number): Promise<void>;
    /**
     * Get processed status of message.
     */
    getProcessedStatus(provider: ContractProvider, queryId: bigint): Promise<"processed" | "unprocessed" | "forgotten">;
    /**
     * Create sender.
     */
    sender(provider: ContractProvider, secretKey: Buffer): Sender;
}
type MessageRelaxedValue = {
    sendMode: SendMode;
    message: MessageRelaxed;
};
export {};
