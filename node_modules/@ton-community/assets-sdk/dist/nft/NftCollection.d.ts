/// <reference types="node" />
import { Address, Cell, ContractProvider } from "@ton/core";
import { NftCollectionBase } from "./NftCollectionBase";
import { NftItem } from "./NftItem";
import { ContentResolver } from "../content";
import { PartialBy } from "../utils";
import { NftRoyaltyParams } from "./types/NftRoyaltyParams";
import { NftCollectionData } from "./types/NftCollectionData";
import { NftItemParams } from "./types/NftItemParams";
import { NftCollectionAction } from "./types/NftCollectionAction";
export type NftCollectionConfig = PartialBy<NftCollectionData, 'itemCode' | 'royalty'>;
export declare function nftCollectionConfigToCell(config: NftCollectionConfig): Cell;
export declare class NftCollection extends NftCollectionBase<NftItemParams> {
    static createFromConfig(config: NftCollectionConfig, code?: Cell, workchain?: number, contentResolver?: ContentResolver): NftCollection;
    static createFromAddress(address: Address, contentResolver?: ContentResolver): NftCollection;
    getItem(provider: ContractProvider, index: bigint): Promise<import("@ton/core").OpenedContract<NftItem>>;
    getRoyaltyParams(provider: ContractProvider): Promise<NftRoyaltyParams>;
    getActions(provider: ContractProvider, options?: {
        lt?: never;
        hash?: never;
        limit?: number;
    } | {
        lt: bigint;
        hash: Buffer;
        limit?: number;
    }): Promise<NftCollectionAction[]>;
}
