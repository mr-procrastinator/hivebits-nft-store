/// <reference types="node" />
import { Address, Cell, ContractProvider } from "@ton/core";
import { NftCollectionBase } from "./NftCollectionBase";
import { ContentResolver } from "../content";
import { SbtItem } from "./SbtItem";
import { SbtCollectionAction } from "./types/SbtCollectionAction";
import { PartialBy } from "../utils";
import { NftCollectionData } from "./types/NftCollectionData";
import { SbtItemParams } from "./types/SbtItemParams";
export type SbtCollectionConfig = Omit<PartialBy<NftCollectionData, 'itemCode'>, 'royalty'>;
export declare function sbtCollectionConfigToCell(config: SbtCollectionConfig): Cell;
export declare class SbtCollection extends NftCollectionBase<SbtItemParams> {
    static createFromConfig(config: SbtCollectionConfig, code?: Cell, workchain?: number, contentResolver?: ContentResolver): SbtCollection;
    static createFromAddress(address: Address, contentResolver?: ContentResolver): SbtCollection;
    getItem(provider: ContractProvider, index: bigint): Promise<import("@ton/core").OpenedContract<SbtItem>>;
    getActions(provider: ContractProvider, options?: {
        lt?: never;
        hash?: never;
        limit?: number;
    } | {
        lt: bigint;
        hash: Buffer;
        limit?: number;
    }): Promise<SbtCollectionAction[]>;
}
