import { Builder, DictionaryValue, Slice } from "@ton/core";
import { LoadParams, StoreParams } from "../../common/types/ParamsValue";
export type NftBatchMintMessage<T> = {
    queryId: bigint;
    requests: NftMintItem<T>[];
};
export declare function storeNftBatchMintMessage<T>(src: NftBatchMintMessage<T>, storeParams: StoreParams<T>): (builder: Builder) => void;
export declare function loadNftBatchMintMessage<T>(slice: Slice, loadParams: LoadParams<T>): NftBatchMintMessage<T>;
export type NftMintItem<T> = {
    index: bigint;
    params: T;
    value?: bigint;
};
export type NftMintItemParams<T> = {
    index: bigint;
    value?: bigint;
} & T;
export declare function storeNftBatchMintItem<T>(request: NftMintItem<T>, storeParams: StoreParams<T>): (builder: Builder) => void;
export declare function loadNftBatchMintItem<T>(slice: Slice, loadParams: LoadParams<T>): NftMintItem<T>;
export declare function createNftMintItemValue<T>(storeParams?: (params: T) => (builder: Builder) => void, loadParams?: (slice: Slice) => T): DictionaryValue<NftMintItem<T>>;
