"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNftMintItemValue = exports.loadNftBatchMintItem = exports.storeNftBatchMintItem = exports.loadNftBatchMintMessage = exports.storeNftBatchMintMessage = void 0;
const core_1 = require("@ton/core");
const opcodes_1 = require("../opcodes");
function storeNftBatchMintMessage(src, storeParams) {
    return (builder) => {
        const dict = core_1.Dictionary.empty(core_1.Dictionary.Keys.BigUint(64), createNftMintItemValue(storeParams));
        for (const r of src.requests) {
            if (dict.has(r.index)) {
                throw new Error('Duplicate items');
            }
            dict.set(r.index, r);
        }
        builder.storeUint(opcodes_1.NFT_BATCH_MINT_OPCODE, 32);
        builder.storeUint(src.queryId ?? 0, 64);
        builder.storeRef((0, core_1.beginCell)().storeDictDirect(dict));
    };
}
exports.storeNftBatchMintMessage = storeNftBatchMintMessage;
function loadNftBatchMintMessage(slice, loadParams) {
    if (slice.loadUint(32) !== opcodes_1.NFT_BATCH_MINT_OPCODE) {
        throw new Error('Wrong opcode');
    }
    const queryId = slice.loadUintBig(64);
    const requests = slice.loadDictDirect(core_1.Dictionary.Keys.BigUint(64), createNftMintItemValue(undefined, loadParams));
    return {
        queryId: queryId,
        requests: requests.values(),
    };
}
exports.loadNftBatchMintMessage = loadNftBatchMintMessage;
function storeNftBatchMintItem(request, storeParams) {
    return (builder) => {
        builder.storeCoins(request.value ?? (0, core_1.toNano)('0.03'));
        builder.storeRef((0, core_1.beginCell)().store(storeParams(request.params)).endCell());
    };
}
exports.storeNftBatchMintItem = storeNftBatchMintItem;
function loadNftBatchMintItem(slice, loadParams) {
    const itemIndex = slice.loadUintBig(64);
    const value = slice.loadCoins();
    const params = slice.loadRef();
    return {
        index: itemIndex,
        value,
        params: loadParams(params.beginParse()),
    };
}
exports.loadNftBatchMintItem = loadNftBatchMintItem;
function createNftMintItemValue(storeParams, loadParams) {
    return {
        serialize(src, builder) {
            if (!storeParams) {
                throw new Error('storeParams is not defined');
            }
            builder.store(storeNftBatchMintItem(src, storeParams));
        },
        parse(src) {
            if (!loadParams) {
                throw new Error('loadParams is not defined');
            }
            return loadNftBatchMintItem(src, loadParams);
        },
    };
}
exports.createNftMintItemValue = createNftMintItemValue;
