"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadNftOwnerAssignedMessage = exports.storeNftOwnerAssignedMessage = void 0;
const opcodes_1 = require("../opcodes");
function storeNftOwnerAssignedMessage(message) {
    return (builder) => {
        const { queryId, previousOwner, payload } = message;
        builder.storeUint(opcodes_1.NFT_OWNER_ASSIGNED_OPCODE, 32)
            .storeUint(queryId, 64)
            .storeAddress(previousOwner)
            .storeMaybeRef(payload);
    };
}
exports.storeNftOwnerAssignedMessage = storeNftOwnerAssignedMessage;
function loadNftOwnerAssignedMessage(slice) {
    if (slice.loadUint(32) !== opcodes_1.NFT_OWNER_ASSIGNED_OPCODE) {
        throw new Error('Wrong opcode');
    }
    const queryId = slice.loadUintBig(64);
    const previousOwner = slice.loadAddress();
    const eitherPayload = slice.loadBoolean();
    const payload = eitherPayload ? slice.loadRef() : slice.asCell();
    return {
        queryId,
        previousOwner,
        payload,
    };
}
exports.loadNftOwnerAssignedMessage = loadNftOwnerAssignedMessage;
