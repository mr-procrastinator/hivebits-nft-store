import { Address, Cell, Contract, ContractProvider, Sender, StateInit } from "@ton/core";
import { NftCollectionData } from "./data";
import { ContentResolver } from "../content";
import { NftChangeContentMessage } from "./types/NftChangeContentMessage";
import { NftMintItemParams } from "./types/NftBatchMintMessage";
import { ParamsValue } from "../common/types/ParamsValue";
export declare abstract class NftCollectionBase<T> implements Contract {
    readonly address: Address;
    readonly init?: StateInit | undefined;
    static code: Cell;
    readonly contentResolver?: ContentResolver;
    readonly itemParamsValue?: ParamsValue<T>;
    constructor(address: Address, init?: StateInit | undefined, contentResolver?: ContentResolver, nftItemParamsValue?: ParamsValue<T>);
    sendDeploy(provider: ContractProvider, sender: Sender, value?: bigint): Promise<void>;
    sendMint(provider: ContractProvider, sender: Sender, item: NftMintItemParams<T>, options?: {
        value?: bigint;
        queryId?: bigint;
    }): Promise<void>;
    sendBatchMint(provider: ContractProvider, sender: Sender, items: NftMintItemParams<T>[], options?: {
        value?: bigint;
        queryId?: bigint;
    }): Promise<void>;
    sendChangeAdmin(provider: ContractProvider, sender: Sender, newAdmin: Address, options?: {
        value?: bigint;
        queryId?: bigint;
    }): Promise<void>;
    sendChangeContent(provider: ContractProvider, sender: Sender, message: NftChangeContentMessage, options?: {
        value?: bigint;
        queryId?: bigint;
    }): Promise<void>;
    getItemAddress(provider: ContractProvider, index: bigint): Promise<Address>;
    getData(provider: ContractProvider): Promise<NftCollectionData>;
    getContent(provider: ContractProvider): Promise<import("../content").ParsedContent<import("./content").ParsedNftContent>>;
    getItemContent(provider: ContractProvider, index: bigint, individualContent: Cell): Promise<Cell>;
}
