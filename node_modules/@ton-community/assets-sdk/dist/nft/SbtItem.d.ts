/// <reference types="node" />
import { Address, Cell, Contract, ContractProvider, Sender, StateInit } from "@ton/core";
import { ContentResolver } from "../content";
import { SbtItemParams } from "./types/SbtItemParams";
import { SbtItemAction } from "./types/SbtItemAction";
import { NftItemData } from "./data";
export type SbtItemConfig = {
    index: bigint;
    collection: Address;
};
export declare function sbtItemConfigToCell(config: SbtItemConfig): Cell;
export declare class SbtItem implements Contract {
    readonly address: Address;
    readonly init?: StateInit | undefined;
    contentResolver?: ContentResolver | undefined;
    static sbtCode: Cell;
    constructor(address: Address, init?: StateInit | undefined, contentResolver?: ContentResolver | undefined);
    static createFromConfig(config: SbtItemConfig, code?: Cell, workchain?: number, contentResolver?: ContentResolver): SbtItem;
    static createFromAddress(address: Address, contentResolver?: ContentResolver): SbtItem;
    sendDeploy(provider: ContractProvider, sender: Sender, params: SbtItemParams, value?: bigint): Promise<void>;
    getData(provider: ContractProvider): Promise<NftItemData>;
    getContent(provider: ContractProvider): Promise<import("../content").ParsedContent<import("./content").ParsedNftContent>>;
    getActions(provider: ContractProvider, options?: {
        lt?: never;
        hash?: never;
        limit?: number;
    } | {
        lt: bigint;
        hash: Buffer;
        limit?: number;
    }): Promise<SbtItemAction[]>;
}
