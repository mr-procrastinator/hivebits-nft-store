"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadTransferMessage = exports.loadEncryptedMessage = exports.storeEncryptedMessage = exports.loadTextMessage = exports.storeTextMessage = exports.loadSimpleTransferMessage = exports.storeSimpleTransferMessage = exports.ENCRYPTED_MESSAGE_OPCODE = exports.TEXT_OPCODE = void 0;
exports.TEXT_OPCODE = 0x00000000;
exports.ENCRYPTED_MESSAGE_OPCODE = 0x2167da4b;
function storeSimpleTransferMessage(value) {
    return (builder) => {
    };
}
exports.storeSimpleTransferMessage = storeSimpleTransferMessage;
function loadSimpleTransferMessage(slice) {
    return {};
}
exports.loadSimpleTransferMessage = loadSimpleTransferMessage;
function storeTextMessage(value) {
    return (builder) => {
        builder.storeUint(0, 32);
        builder.storeStringTail(value.text);
    };
}
exports.storeTextMessage = storeTextMessage;
function loadTextMessage(slice) {
    if (slice.loadUint(32) !== 0) {
        throw new Error('Wrong opcode');
    }
    return { text: slice.loadStringTail() };
}
exports.loadTextMessage = loadTextMessage;
function storeEncryptedMessage(value) {
    return (builder) => {
        builder.storeUint(exports.ENCRYPTED_MESSAGE_OPCODE, 32);
        builder.storeStringTail(value.data.toString('utf-8'));
    };
}
exports.storeEncryptedMessage = storeEncryptedMessage;
function loadEncryptedMessage(slice) {
    if (slice.loadUint(32) !== exports.ENCRYPTED_MESSAGE_OPCODE) {
        throw new Error('Wrong opcode');
    }
    const data = slice.loadStringTail();
    return { data: Buffer.from(data, 'utf-8') };
}
exports.loadEncryptedMessage = loadEncryptedMessage;
function loadTransferMessage(slice) {
    if (slice.remainingBits === 0) {
        return { kind: 'simple_transfer' };
    }
    try {
        const opcode = slice.preloadUint(32);
        switch (opcode) {
            case exports.TEXT_OPCODE:
                return { kind: 'text_message', ...loadTextMessage(slice) };
            case exports.ENCRYPTED_MESSAGE_OPCODE:
                return { kind: 'encrypted_message', ...loadEncryptedMessage(slice) };
        }
    }
    catch (e) { }
    return { kind: 'unknown' };
}
exports.loadTransferMessage = loadTransferMessage;
