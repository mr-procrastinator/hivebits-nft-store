"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PinataStorage = void 0;
const utils_1 = require("../utils");
class PinataStorage {
    constructor(apiKey, secretApiKey) {
        this.client = (0, utils_1.defer)(async () => {
            const pinata = await Promise.resolve().then(() => __importStar(require('@pinata/sdk'))).then((m) => m.default);
            return new pinata(this.apiKey, this.secretApiKey);
        });
        this.stream = (0, utils_1.defer)(async (contents) => {
            const stream = await Promise.resolve().then(() => __importStar(require('stream'))).then((m) => m.Readable);
            return stream.from(contents);
        });
        this.apiKey = apiKey;
        this.secretApiKey = secretApiKey;
    }
    static create(params) {
        return new PinataStorage(params.pinataApiKey, params.pinataSecretKey);
    }
    async uploadFile(contents) {
        const client = await this.client();
        const stream = await this.stream(contents);
        const result = await client.pinFileToIPFS(stream, {
            pinataMetadata: {
                name: 'Assets SDK Jetton',
            }
        });
        return 'ipfs://' + result.IpfsHash;
    }
}
exports.PinataStorage = PinataStorage;
