"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3Storage = void 0;
const utils_1 = require("../utils");
class S3Storage {
    constructor(accessKeyId, secretAccessKey, bucket) {
        this.s3 = (0, utils_1.defer)(async () => {
            const s3 = await Promise.resolve().then(() => __importStar(require('@aws-sdk/client-s3'))).then((m) => m.S3);
            return new s3({
                credentials: {
                    accessKeyId: this.accessKeyId,
                    secretAccessKey: this.secretAccessKey,
                },
            });
        });
        this.accessKeyId = accessKeyId;
        this.secretAccessKey = secretAccessKey;
        this.bucket = bucket;
    }
    static create(params) {
        return new S3Storage(params.s3AccessKeyId, params.s3SecretAccessKey, params.s3Bucket);
    }
    async uploadFile(contents) {
        const s3 = await this.s3();
        const key = 'jetton/' + Math.random().toString(36).substring(2);
        await s3.putObject({
            Bucket: this.bucket,
            Key: key,
            Body: contents,
        });
        return 'https://' + this.bucket + '.s3.amazonaws.com/' + key;
    }
}
exports.S3Storage = S3Storage;
