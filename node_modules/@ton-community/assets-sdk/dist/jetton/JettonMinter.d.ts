/// <reference types="node" />
import { Address, Cell, Contract, ContractProvider, Sender, StateInit } from "@ton/core";
import { JettonWallet } from "./JettonWallet";
import { ContentResolver } from "../content";
import { PartialBy } from "../utils";
import { SendTransferOptions } from "../common/types";
import { JettonMinterContent } from "./types/JettonMinterContent";
import { JettonMinterAction } from "./types/JettonMinterAction";
import { JettonMinterData } from "./types/JettonMinterData";
export type JettonMinterConfig = PartialBy<JettonMinterContent, 'jettonWalletCode'>;
export declare function jettonMinterConfigToCell(config: JettonMinterConfig): Cell;
export declare class JettonMinter implements Contract {
    readonly address: Address;
    readonly init?: StateInit | undefined;
    readonly contentResolver?: ContentResolver | undefined;
    static code: Cell;
    constructor(address: Address, init?: StateInit | undefined, contentResolver?: ContentResolver | undefined);
    static createFromAddress(address: Address, contentResolver?: ContentResolver): JettonMinter;
    static createFromConfig(config: JettonMinterConfig, code?: Cell, workchain?: number, contentResolver?: ContentResolver): JettonMinter;
    sendDeploy(provider: ContractProvider, sender: Sender, value?: bigint): Promise<void>;
    sendMint(provider: ContractProvider, sender: Sender, recipient: Address, amount: bigint, options?: SendTransferOptions & {
        value?: bigint;
        queryId?: bigint;
    }): Promise<void>;
    sendChangeAdmin(provider: ContractProvider, sender: Sender, newAdmin: Address, options?: {
        value?: bigint;
        queryId?: bigint;
    }): Promise<void>;
    sendChangeContent(provider: ContractProvider, sender: Sender, newContent: Cell, options?: {
        value?: bigint;
        queryId?: bigint;
    }): Promise<void>;
    getData(provider: ContractProvider): Promise<JettonMinterData>;
    getWalletAddress(provider: ContractProvider, owner: Address): Promise<Address>;
    getWallet(provider: ContractProvider, owner: Address): Promise<import("@ton/core").OpenedContract<JettonWallet>>;
    getContent(provider: ContractProvider): Promise<import("../content").ParsedContent<import("./content").ParsedJettonContent>>;
    getActions(provider: ContractProvider, options?: {
        lt?: never;
        hash?: never;
        limit?: number;
    } | {
        lt: bigint;
        hash: Buffer;
        limit?: number;
    }): Promise<JettonMinterAction[]>;
}
