"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const common_1 = require("./common");
const inquirer_1 = __importDefault(require("inquirer"));
const promises_1 = require("fs/promises");
async function promptForUserInput() {
    const { name, description, image, symbol, decimals } = await inquirer_1.default.prompt([{
            name: 'name',
            message: 'Enter jetton name',
        }, {
            name: 'description',
            message: 'Enter jetton description',
        }, {
            name: 'image',
            message: 'Enter image path or link',
            async validate(input) {
                if (input.startsWith('http://') || input.startsWith('https://')) {
                    const response = await fetch(input);
                    if (!response.ok) {
                        return 'Image file not found';
                    }
                    return true;
                }
                try {
                    await (0, promises_1.readFile)(input);
                    return true;
                }
                catch (e) {
                    return 'Image file not found';
                }
            }
        }, {
            name: 'symbol',
            message: 'Enter jetton symbol (for example TON)',
        }, {
            name: 'decimals',
            message: 'Enter jetton decimals (for example 9)',
            default: '9',
            type: 'number',
            validate: (value) => {
                const amount = BigInt(value);
                return amount >= 0 ? true : 'Amount must be a positive integer';
            }
        }]);
    let formattedImage;
    if (image === '') {
        formattedImage = { kind: 'none' };
    }
    else if (image.startsWith('http://') || image.startsWith('https://')) {
        formattedImage = { kind: 'url', url: image };
    }
    else {
        formattedImage = { kind: 'file', file: await (0, promises_1.readFile)(image) };
    }
    let formattedDescription;
    if (typeof description === 'string' && description !== '') {
        formattedDescription = description;
    }
    return {
        name: name,
        description: formattedDescription,
        image: formattedImage,
        symbol: symbol,
        decimals: parseInt(decimals),
    };
}
async function main() {
    const { sdk, network } = await (0, common_1.createEnv)();
    const { name, description, image, symbol, decimals } = await promptForUserInput();
    let uploadImage;
    if (image.kind === 'url') {
        uploadImage = image.url;
    }
    else if (image.kind === 'file') {
        uploadImage = await (0, common_1.retry)(() => sdk.storage.uploadFile(image.file), { name: 'upload image' });
    }
    else {
        uploadImage = undefined;
    }
    const jettonParams = {
        name: name,
        description: description,
        image: uploadImage,
        symbol: symbol,
        decimals: decimals,
    };
    const jetton = await sdk.deployJetton(jettonParams);
    const jettonInfo = {
        name: jettonParams.name,
        description: jettonParams.description,
        image: jettonParams.image,
        symbol: jettonParams.symbol,
        decimals: jettonParams.decimals,
        'jetton address': jetton.address,
    };
    (0, common_1.printInfo)(jettonInfo, network);
}
exports.main = main;
