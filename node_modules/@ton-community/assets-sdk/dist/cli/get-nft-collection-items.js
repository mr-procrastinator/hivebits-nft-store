"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const common_1 = require("./common");
const core_1 = require("@ton/core");
const inquirer_1 = __importDefault(require("inquirer"));
const chalk_1 = __importDefault(require("chalk"));
async function promptForUserInput() {
    const { collection, limit, skip } = await inquirer_1.default.prompt([{
            name: 'collection',
            message: 'Enter collection address',
        }, {
            name: 'limit',
            message: 'Enter limit (100 by default)',
            default: '100',
        }, {
            name: 'skip',
            message: 'Enter skip (0 by default)',
            default: '0',
        }]);
    return {
        collectionAddress: core_1.Address.parse(collection),
        limit: parseInt(limit),
        skip: parseInt(skip),
    };
}
async function main() {
    const { sdk, network } = await (0, common_1.createEnv)();
    const { collectionAddress, limit, skip } = await promptForUserInput();
    const collection = sdk.openNftCollection(collectionAddress);
    const { nextItemIndex } = await collection.getData();
    if (nextItemIndex === 0n) {
        console.log(`${chalk_1.default.yellow('...')} ${chalk_1.default.yellow('collection is empty')}`);
        return;
    }
    if (skip >= nextItemIndex) {
        throw new Error(`Skip is too big, collection contains only ${nextItemIndex} items`);
    }
    const count = Math.min(limit, Number(nextItemIndex) - skip);
    const items = Array.from({ length: count }, (_, i) => i + Number(skip));
    const itemsData = await Promise.all(items.map(async (index) => {
        const item = await collection.getItem(BigInt(index));
        const itemData = await item.getData();
        return {
            index: itemData.index,
            owner: itemData.owner,
            nftAddress: item.address,
        };
    }));
    for (const itemData of itemsData) {
        const itemInfo = {
            name: `Item #${itemData.index}`,
            address: itemData.nftAddress,
            owner: itemData.owner,
        };
        (0, common_1.printInfo)(itemInfo, network);
    }
    const hasMore = nextItemIndex > BigInt(skip + count);
    if (hasMore) {
        console.log(`${chalk_1.default.yellow('...')} ${chalk_1.default.yellow(nextItemIndex - BigInt(skip + count))} more items`);
    }
}
exports.main = main;
