"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const inquirer_1 = __importDefault(require("inquirer"));
const crypto_1 = require("@ton/crypto");
const promises_1 = require("fs/promises");
const __1 = require("../");
const common_1 = require("./common");
const key_1 = require("../key");
async function main() {
    const { network, wallet } = await inquirer_1.default.prompt([{
            name: 'network',
            message: 'Which network to use?',
            choices: ['mainnet', 'testnet'],
            type: 'list',
        }, {
            name: 'wallet',
            message: 'Which wallet type to use?',
            choices: ['highload-v2'],
            type: 'list',
        }]);
    const mnemonic = await (0, crypto_1.mnemonicNew)();
    const pairs = [
        ['NETWORK', network],
        ['MNEMONIC', mnemonic.join(' ')],
        ['WALLET_TYPE', wallet],
    ];
    const keyPair = await (0, key_1.importKey)(mnemonic);
    const walletContract = await (0, __1.createWallet)(wallet, keyPair.publicKey);
    const address = walletContract.address;
    const { storage } = await inquirer_1.default.prompt([{
            name: 'storage',
            message: 'Which storage to use?',
            choices: ['pinata', 's3'],
            type: 'list',
        }]);
    pairs.push(['STORAGE_TYPE', storage]);
    if (storage === 'pinata') {
        const q = await inquirer_1.default.prompt([{
                name: 'apikey',
                message: 'Please enter your Pinata API key',
            }, {
                name: 'secretkey',
                message: 'Please enter your Pinata secret key',
            }]);
        pairs.push(['PINATA_API_KEY', q.apikey], ['PINATA_SECRET_KEY', q.secretkey]);
    }
    else if (storage === 's3') {
        const q = await inquirer_1.default.prompt([{
                name: 'accesskeyid',
                message: 'Please enter your S3 access key ID',
            }, {
                name: 'secretaccesskey',
                message: 'Please enter your S3 secret access key',
            }, {
                name: 'bucket',
                message: 'Please enter the S3 bucket name to use'
            }]);
        pairs.push(['S3_ACCESS_KEY_ID', q.accesskeyid], ['S3_SECRET_ACCESS_KEY', q.secretaccesskey], ['S3_BUCKET', q.bucket]);
    }
    else {
        throw new Error(`Unknown storage type: ${storage}`);
    }
    const { ipfsGateway } = await inquirer_1.default.prompt([{
            name: 'ipfsGateway',
            message: 'Which IPFS gateway to use?',
            choices: ['pinata', 'ipfs.io', 'https'],
            type: 'list',
        }]);
    pairs.push(['IPFS_GATEWAY_TYPE', ipfsGateway]);
    if (ipfsGateway === 'ipfs.io') {
        pairs.push(['IPFS_GATEWAY', 'https://ipfs.io/']);
    }
    else if (ipfsGateway === 'https') {
        const { gateway } = await inquirer_1.default.prompt([{
                name: 'gateway',
                message: 'Please enter the IPFS gateway to use (e.g. https://ipfs.io/)',
            }]);
        pairs.push(['IPFS_GATEWAY', gateway]);
    }
    else if (ipfsGateway === 'pinata') {
        const { gateway, apikey } = await inquirer_1.default.prompt([{
                name: 'gateway',
                message: 'Please enter the IPFS gateway to use (e.g. https://gateway.pinata.cloud/)',
            }, {
                name: 'apikey',
                message: 'Please enter your Pinata Gateway API key',
            }]);
        pairs.push(['IPFS_GATEWAY', gateway], ['IPFS_GATEWAY_API_KEY', apikey]);
    }
    else {
        throw new Error(`Unknown IPFS gateway type: ${ipfsGateway}`);
    }
    try {
        await (0, promises_1.writeFile)('.env', pairs.map(p => `${p[0]}="${p[1]}"`).join('\n'), {
            flag: 'wx',
        });
    }
    catch (e) {
        console.error(e);
        console.log('Could not write the .env file. Does it already exist?');
        return;
    }
    (0, common_1.printAddress)(address, network);
    if (network === 'testnet') {
        console.log('Please use https://t.me/testgiver_ton_bot to get some test TON');
    }
    else {
        console.log('Please use top up your wallet with some TON');
    }
}
exports.main = main;
