"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
require("dotenv/config");
const common_1 = require("./common");
const core_1 = require("@ton/core");
const inquirer_1 = __importDefault(require("inquirer"));
async function promptForUserInput() {
    const { item } = await inquirer_1.default.prompt([{
            name: 'item',
            message: 'Enter NFT address',
        }]);
    return {
        nftAddress: core_1.Address.parse(item),
    };
}
async function main() {
    const { sdk, network, sender } = await (0, common_1.createEnv)();
    const { nftAddress } = await promptForUserInput();
    const nft = sdk.openNftItem(nftAddress);
    const { owner } = await nft.getData();
    if (!owner) {
        throw new Error(`NFT ${(0, common_1.formatAddress)(nftAddress, network)} is not owned`);
    }
    const sale = sdk.openNftSale(owner);
    const saleData = await sale.getData();
    const saleInfo = {
        name: 'NFT Sale',
        price: (0, core_1.fromNano)(saleData.fullPrice) + ' TON',
        seller: saleData.nftOwner,
        sale: sale.address,
        marketplace: saleData.marketplace,
        marketplaceFee: (0, core_1.fromNano)(saleData.marketplaceFee) + ' TON',
        royalty: saleData.royaltyTo,
        royaltyFee: (0, core_1.fromNano)(saleData.royalty) + ' TON',
    };
    (0, common_1.printInfo)(saleInfo, network);
    const { confirm } = await inquirer_1.default.prompt([{
            name: 'confirm',
            message: 'Do you want to cancel sale?',
            type: 'confirm',
        }]);
    if (!confirm) {
        return;
    }
    await sale.sendCancel(sender);
    const cancelledSaleInfo = {
        name: 'Cancelled NFT Sale',
        price: (0, core_1.fromNano)(saleData.fullPrice) + ' TON',
        seller: saleData.nftOwner,
        sale: sale.address,
        marketplace: saleData.marketplace,
        marketplaceFee: (0, core_1.fromNano)(saleData.marketplaceFee) + ' TON',
        royalty: saleData.royaltyTo,
        royaltyFee: (0, core_1.fromNano)(saleData.royalty) + ' TON',
    };
    (0, common_1.printInfo)(cancelledSaleInfo, network);
}
exports.main = main;
