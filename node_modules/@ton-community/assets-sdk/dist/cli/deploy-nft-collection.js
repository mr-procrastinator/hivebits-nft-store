"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const common_1 = require("./common");
const inquirer_1 = __importDefault(require("inquirer"));
const promises_1 = require("fs/promises");
const core_1 = require("@ton/core");
async function promptForUserInput(params) {
    const { defaultRoyaltyRecipient } = params;
    const { name, description, image, type } = await inquirer_1.default.prompt([{
            name: 'type',
            message: 'Choose collection type',
            type: 'list',
            choices: ['nft', 'sbt'],
        }, {
            name: 'name',
            message: 'Enter collection name',
        }, {
            name: 'description',
            message: 'Enter collection description',
        }, {
            name: 'image',
            message: 'Enter image path or link',
            async validate(input) {
                if (input.startsWith('http://') || input.startsWith('https://')) {
                    const response = await fetch(input);
                    if (!response.ok) {
                        return 'Image file not found';
                    }
                    return true;
                }
                try {
                    await (0, promises_1.readFile)(input);
                    return true;
                }
                catch (e) {
                    return 'Image file not found';
                }
            }
        }]);
    let formattedImage;
    if (image === '') {
        formattedImage = { kind: 'none' };
    }
    else if (image.startsWith('http://') || image.startsWith('https://')) {
        formattedImage = { kind: 'url', url: image };
    }
    else {
        formattedImage = { kind: 'file', file: await (0, promises_1.readFile)(image) };
    }
    let formattedDescription;
    if (typeof description === 'string' && description !== '') {
        formattedDescription = description;
    }
    let royaltyParams;
    if (type === 'nft') {
        const { royalty, royaltyRecipient } = await inquirer_1.default.prompt([{
                name: 'royalty',
                message: 'Enter royalty percentage (eg. 5%)',
                default: '5%',
                type: 'number',
                validate(input) {
                    const royalty = parseFloat(input);
                    if (isNaN(royalty) || royalty < 0 || royalty > 100) {
                        return 'Royalty must be a number between 0 and 100';
                    }
                    return true;
                }
            }, {
                name: 'royaltyRecipient',
                message: 'Enter royalty recipient address (default: your wallet address)',
                default: defaultRoyaltyRecipient,
            }]);
        // converting royalty to fraction
        const royaltyDenominator = 10000n;
        const royaltyNumerator = BigInt(Math.round(parseFloat(royalty) * Number(royaltyDenominator) / 100));
        royaltyParams = {
            numerator: royaltyNumerator,
            denominator: royaltyDenominator,
            recipient: core_1.Address.parse(royaltyRecipient)
        };
    }
    return {
        name: name,
        description: formattedDescription,
        image: formattedImage,
        type: type,
        royaltyParams: royaltyParams,
    };
}
async function main() {
    const { sdk, network, sender } = await (0, common_1.createEnv)();
    const { name, description, image, type, royaltyParams } = await promptForUserInput({
        defaultRoyaltyRecipient: (0, common_1.formatAddress)(sender.address, network)
    });
    let uploadedImage;
    if (image.kind === 'url') {
        uploadedImage = image.url;
    }
    else if (image.kind === 'file') {
        uploadedImage = await (0, common_1.retry)(() => sdk.storage.uploadFile(image.file), { name: 'upload image' });
    }
    else {
        uploadedImage = undefined;
    }
    const collectionContent = {
        commonContent: '',
        collectionContent: {
            name: name,
            description: description,
            image: uploadedImage,
        }
    };
    let createdCollection;
    if (type === 'nft') {
        const collectionParams = { royaltyParams: royaltyParams };
        createdCollection = await sdk.deployNftCollection(collectionContent, collectionParams);
    }
    else if (type === 'sbt') {
        createdCollection = await sdk.deploySbtCollection(collectionContent);
    }
    else {
        throw new Error(`Unknown collection type: ${type}`);
    }
    const collectionInfo = {
        name: name,
        description: description,
        image: uploadedImage,
        'collection address': createdCollection.address,
    };
    (0, common_1.printInfo)(collectionInfo, network);
}
exports.main = main;
