"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const common_1 = require("./common");
const inquirer_1 = __importDefault(require("inquirer"));
const promises_1 = require("fs/promises");
const core_1 = require("@ton/core");
async function promptForUserInput(params) {
    const { address, owner, name, description, image } = await inquirer_1.default.prompt([{
            name: 'address',
            message: 'Enter collection address'
        }, {
            name: 'owner',
            message: 'Enter item owner (default: your wallet address)',
            default: params.defaultOwner,
        }, {
            name: 'name',
            message: 'Enter item name',
        }, {
            name: 'description',
            message: 'Enter item description',
        }, {
            name: 'image',
            message: 'Enter image path or link',
            async validate(input) {
                if (input.startsWith('http://') || input.startsWith('https://')) {
                    const response = await fetch(input);
                    if (!response.ok) {
                        return 'Image file not found';
                    }
                    return true;
                }
                try {
                    await (0, promises_1.readFile)(input);
                    return true;
                }
                catch (e) {
                    return 'Image file not found';
                }
            }
        }]);
    let formattedImage;
    if (image === '') {
        formattedImage = { kind: 'none' };
    }
    else if (image.startsWith('http://') || image.startsWith('https://')) {
        formattedImage = { kind: 'url', url: image };
    }
    else {
        formattedImage = { kind: 'file', file: await (0, promises_1.readFile)(image) };
    }
    let formattedDescription;
    if (typeof description === 'string' && description !== '') {
        formattedDescription = description;
    }
    return {
        address: core_1.Address.parse(address),
        owner: core_1.Address.parse(owner),
        name: name,
        description: formattedDescription,
        image: formattedImage,
    };
}
async function main() {
    const { sdk, network, sender } = await (0, common_1.createEnv)();
    const { address, owner, name, description, image } = await promptForUserInput({
        defaultOwner: (0, common_1.formatAddress)(sender.address, network)
    });
    const collection = sdk.openNftCollection(address);
    let uploadedImage;
    if (image.kind === 'url') {
        uploadedImage = image.url;
    }
    else if (image.kind === 'file') {
        uploadedImage = await (0, common_1.retry)(() => sdk.storage.uploadFile(image.file), { name: 'upload image' });
    }
    else {
        uploadedImage = undefined;
    }
    const content = Buffer.from(JSON.stringify({
        name: name,
        description: description,
        image: uploadedImage,
    }));
    const contentUrl = await (0, common_1.retry)(() => sdk.storage.uploadFile(content), { name: 'upload image' });
    const { nextItemIndex: index } = await collection.getData();
    await collection.sendMint(sender, {
        index: index,
        owner: owner,
        individualContent: contentUrl,
    });
    const nftItem = await collection.getItem(index);
    const nftItemInfo = {
        name: name,
        description: description,
        image: uploadedImage,
        owner: owner,
        collection: address,
        index: index,
        'nft address': nftItem.address,
    };
    (0, common_1.printInfo)(nftItemInfo, network);
}
exports.main = main;
